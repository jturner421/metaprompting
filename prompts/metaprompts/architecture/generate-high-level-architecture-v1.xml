<purpose>
    You are an expert software architect responsible for creating comprehensive system architectures.
    Your goal is to design a clear, scalable, and maintainable architecture based on requirements and technology constraints.
    You translate business requirements into technical solutions while ensuring best practices and patterns are followed.
</purpose>
<instructions>
    <instruction>Analyze the provided requirements and technology stack thoroughly.</instruction>
    <instruction>Generate a high-level architecture design that satisfies the requirements.</instruction>
    <instruction>Recommend appropriate architecture patterns based on requirements and constraints.</instruction>
    <instruction>Define clear component boundaries and responsibilities.</instruction>
    <instruction>Map technologies to specific components based on capabilities.</instruction>
    <instruction>Design clean interfaces and communication patterns between components.</instruction>
    <instruction>Create visual representations of the architecture using mermaid diagrams.</instruction>
    <instruction>Document development guidelines and best practices.</instruction>
</instructions>
<sections>
    <overview>
        - System Purpose & Goals
        - Key Requirements
        - Architecture Pattern Selection
        - High-Level Design Decisions
    </overview>
    <core-components>
    For each component:
    - Component Name
    - Primary Responsibility
    - Technology Selection
    - Component Boundaries
    - Internal Structure
    - External Interfaces
</core-components>

<component-relationships>
    - Data Flow Patterns
    - Communication Methods
    - Integration Points
    - Dependency Map
    - Cross-Cutting Concerns
</component-relationships>

<project-structure>
    - Directory Organization
    - Module Layout
    - Code Organization
    - Resource Management
</project-structure>

<technology-mapping>
    - Frontend Technologies
    - Backend Services
    - Data Storage
    - Infrastructure
    - Development Tools
    - Third-Party Services
</technology-mapping>

<development-guidelines>
    - Coding Standards
    - Architecture Principles
    - Design Patterns
    - Best Practices
    - Testing Strategy
    - Deployment Considerations
</development-guidelines>

<architecture-diagram>
    <mermaid>
    graph TD
        A[Presentation Layer] --> B[Application Layer]
        B --> C[Domain Layer]
        B --> D[Infrastructure Layer]
        C --> D
        
        subgraph Frontend
        A
        end
        
        subgraph Backend
        B
        C
        end
        
        subgraph Data & External Services
        D
        end
    </mermaid>
</architecture-diagram>
</sections>
<variables>
    <provided-requirements>
        # Core Requirements for District Court Caseload Dashboard

        ## Functional Requirements
        ### Dashboard
        - REQ-FR-DASH-1: The system shall provide a dashboard to display key measurements and metrics.
        - REQ-FR-DASH-2: The dashboard shall focus on caseload data for the District Court.

        ## Additional Requirements
        (None specified in the project idea)

    </provided-requirements>

    <provided-tech-stack>
        Technology Stack Documentation
        Core Technology
        Dash Plotly 2.18.1
        Required Dependencies
        Dashboard Functionality
        dash-core-components 2.0.0
        Purpose: Provides core components for building Dash applications (layout, interactivity).
        Chosen because: It is a standard component library for Dash, providing essential building blocks for creating interactive web applications.
        dash-html-components 2.0.0
        Purpose: Provides HTML components for Dash applications.
        Chosen because: It allows for easy integration of standard HTML elements within the Dash framework.
        Data Visualization
        plotly 5.24.1
        Purpose: Provides interactive charting capabilities.
        Chosen because: It is the core charting library used by Dash, enabling the creation of various interactive visualizations.
        Caseload Data Presentation
        pandas 2.2.3
        Purpose: Data manipulation and analysis, likely needed for handling caseload data.
        Chosen because: It is a powerful and widely-used library for data analysis in Python, well-suited for processing and transforming data for visualization.
        Container Management
        docker 7.0.0
        Purpose: Programmatic interaction with Docker containers and images.
        Chosen because: Enables consistent environment management across development, staging, and production.
        docker-compose 1.29.2
        Purpose: Python interface for Docker Compose functionality.
        Chosen because: Supports container orchestration and multi-container application management.
        Development Dependencies
        pdm 2.11.1
        Purpose: Dependency management for Python projects.
        Chosen because: Provides a modern and efficient way to manage project dependencies.
        Compatibility Matrix
        Dependency	Dash 2.18.1	dash-core-components 2.0.0	dash-html-components 2.0.0	plotly 5.24.1	pandas 2.2.3	docker 7.0.0	docker-compose 1.29.2
        Dash 2.18.1	-	✓	✓	✓	✓	✓	✓
        dash-core-components 2.0.0	✓	-	✓	✓	✓	✓	✓
        dash-html-components 2.0.0	✓	✓	-	✓	✓	✓	✓
        plotly 5.24.1	✓	✓	✓	-	✓	✓	✓
        pandas 2.2.3	✓	✓	✓	✓	-	✓	✓
        docker 7.0.0	✓	✓	✓	✓	✓	-	✓
        docker-compose 1.29.2	✓	✓	✓	✓	✓	✓	-
        Version Lock Rationale
        All versions are exact (e.g., "2.0.0" not "^2.0.0") to ensure:

        Consistent behavior across environments
        Predictable dependency resolution
        Reproducible builds
    </provided-tech-stack>
</variables>
Your architecture design: